service: crud-serverless

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    AWS_REGION: ${env:AWS_REGION, 'us-east-1'}
    DYNAMODB_TABLE_NAME: ${env:DYNAMODB_TABLE_NAME, 'employees'}

plugins:
  - serverless-offline

functions:
  createEmployee:
    handler: src/lambda/createEmployee.handler
    environment:
      DYNAMODB_TABLE_NAME: ${self:provider.environment.DYNAMODB_TABLE_NAME}
    timeout: 300 # 5 minutes
    events:
      - http:
          path: employees
          method: post

  findAllEmployees:
    handler: src/lambda/findAllEmployees.handler
    environment:
      DYNAMODB_TABLE_NAME: ${self:provider.environment.DYNAMODB_TABLE_NAME}
    timeout: 300 # 5 minutes
    events:
      - http:
          path: employees
          method: get

  findOneEmployee:
    handler: src/lambda/findOneEmployee.handler
    environment:
      DYNAMODB_TABLE_NAME: ${self:provider.environment.DYNAMODB_TABLE_NAME}
    timeout: 300 # 5 minutes
    events:
      - http:
          path: employees/{id}
          method: get

  updateEmployee:
    handler: src/lambda/updateEmployee.handler
    environment:
      DYNAMODB_TABLE_NAME: ${self:provider.environment.DYNAMODB_TABLE_NAME}
    timeout: 300 # 5 minutes
    events:
      - http:
          path: employees/{id}
          method: put

  deleteEmployee:
    handler: src/lambda/deleteEmployee.handler
    environment:
      DYNAMODB_TABLE_NAME: ${self:provider.environment.DYNAMODB_TABLE_NAME}
    timeout: 300 # 5 minutes
    events:
      - http:
          path: employees/{id}
          method: delete

resources:
  Resources:
    EmployeesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: employeeId
            AttributeType: N
        KeySchema:
          - AttributeName: employeeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

custom:
  dynamoDbTableName: ${env:DYNAMODB_TABLE_NAME, 'employees'}
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3001
    noTimeout: false
    printOutput: true
    logLevel: 'info'
